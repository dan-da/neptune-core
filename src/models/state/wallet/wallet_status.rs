use std::fmt::Display;

use itertools::Itertools;
use serde::Deserialize;
use serde::Serialize;

use crate::models::blockchain::transaction::utxo::Utxo;
use crate::models::blockchain::type_scripts::native_currency_amount::NativeCurrencyAmount;
use crate::models::proof_abstractions::timestamp::Timestamp;
use crate::util_types::mutator_set::ms_membership_proof::MsMembershipProof;

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct WalletStatusElement {
    pub aocl_leaf_index: u64,
    pub utxo: Utxo,
}

impl WalletStatusElement {
    pub fn new(aocl_leaf_index: u64, utxo: Utxo) -> Self {
        Self {
            aocl_leaf_index,
            utxo,
        }
    }
}

impl Display for WalletStatusElement {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let string: String = format!("({}, {:?})", self.aocl_leaf_index, self.utxo);
        write!(f, "{}", string)
    }
}

/// Represents a snapshot of monitored-utxos in the wallet at a given point in time.
///
/// monitored-utxos are those utxos that the wallet has a reason to track.
///
/// The utxos are divided into two primary groups:
///
/// 1. synced utxos are those which have a membership-proof for the current tip.
///
/// 2. unsynced utxos are those which have a membership-proof for a block other
///    than the current tip.
///
/// Each group is further divided into:
///
/// 1. unspent are those which have not been used as an input in a confirmed
///    block.
///
/// 2. spent are those which have been used as an input in a confirmed block.
///
/// For unspent utxos, a further distinction is made:
///
/// 1. available utxos are those which are spendable now.  (not timelocked)
///
/// 2. timelocked utxos are those which are not spendable until a certain time.
///    (timelocked)
///
/// note: WalletStatus is generated by WalletState::get_wallet_status().
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct WalletStatus {
    pub synced_unspent: Vec<(WalletStatusElement, MsMembershipProof)>,
    pub synced_spent: Vec<WalletStatusElement>,
    pub unsynced_unspent: Vec<WalletStatusElement>,
    pub unsynced_spent: Vec<WalletStatusElement>,
}

impl WalletStatus {
    /// synced, total balance (includes timelocked utxos)
    pub fn synced_unspent_total_amount(&self) -> NativeCurrencyAmount {
        self.synced_unspent
            .iter()
            .map(|(wse, _msmp)| &wse.utxo)
            .map(|utxo| utxo.get_native_currency_amount())
            .sum::<NativeCurrencyAmount>()
    }

    /// synced, available balance (excludes timelocked utxos)
    pub fn synced_unspent_available_amount(&self, timestamp: Timestamp) -> NativeCurrencyAmount {
        self.synced_unspent
            .iter()
            .map(|(wse, _msmp)| &wse.utxo)
            .filter(|utxo| utxo.can_spend_at(timestamp))
            .map(|utxo| utxo.get_native_currency_amount())
            .sum::<NativeCurrencyAmount>()
    }

    /// sum of synced, timelocked funds (only)
    pub fn synced_unspent_timelocked_amount(&self, timestamp: Timestamp) -> NativeCurrencyAmount {
        self.synced_unspent
            .iter()
            .map(|(wse, _msmp)| &wse.utxo)
            .filter(|utxo| utxo.is_timelocked_but_otherwise_spendable_at(timestamp))
            .map(|utxo| utxo.get_native_currency_amount())
            .sum::<NativeCurrencyAmount>()
    }

    /// sum of synced, spent funds
    ///
    /// note: only used by `impl Display`.  Can we remove it?
    pub(crate) fn synced_spent_amount(&self) -> NativeCurrencyAmount {
        self.synced_spent
            .iter()
            .map(|wse| wse.utxo.get_native_currency_amount())
            .sum::<NativeCurrencyAmount>()
    }

    /// unsynced, available balance (excludes timelocked utxos)
    ///
    /// note: only used by `impl Display`.  Can we remove it?
    pub(crate) fn unsynced_unspent_available_amount(
        &self,
        timestamp: Timestamp,
    ) -> NativeCurrencyAmount {
        self.unsynced_unspent
            .iter()
            .filter(|wse| wse.utxo.can_spend_at(timestamp))
            .map(|wse| wse.utxo.get_native_currency_amount())
            .sum::<NativeCurrencyAmount>()
    }

    /// unsynced, spent funds
    ///
    /// note: only used by `impl Display`.  Can we remove it?
    pub(crate) fn unsynced_spent_amount(&self) -> NativeCurrencyAmount {
        self.unsynced_spent
            .iter()
            .map(|wse| wse.utxo.get_native_currency_amount())
            .sum::<NativeCurrencyAmount>()
    }
}

impl Display for WalletStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let now = Timestamp::now();
        let synced_unspent_available_count: usize = self
            .synced_unspent
            .iter()
            .filter(|(wse, _mnmp)| wse.utxo.can_spend_at(now))
            .count();
        let synced_unspent_available: String = format!(
            "synced, unspent available UTXOS: count: {}, amount: {:?}\n[{}]",
            synced_unspent_available_count,
            self.synced_unspent_available_amount(now),
            self.synced_unspent
                .iter()
                .filter(|(wse, _mnmp)| wse.utxo.can_spend_at(now))
                .map(|x| x.0.to_string())
                .join(",")
        );
        let synced_unspent_timelocked_count: usize = self
            .synced_unspent
            .iter()
            .filter(|(wse, _mnmp)| wse.utxo.is_timelocked_but_otherwise_spendable_at(now))
            .count();
        let synced_unspent_timelocked: String = format!(
            "synced, unspent timelocked UTXOS: count: {}, amount: {:?}\n[{}]",
            synced_unspent_timelocked_count,
            self.synced_unspent_timelocked_amount(now),
            self.synced_unspent
                .iter()
                .filter(|(wse, _mnmp)| wse.utxo.is_timelocked_but_otherwise_spendable_at(now))
                .map(|x| x.0.to_string())
                .join(",")
        );
        let unsynced_unspent_count: usize = self.unsynced_unspent.len();
        let unsynced_unspent: String = format!(
            "unsynced, unspent UTXOS: count: {}, amount: {:?}\n[{}]",
            unsynced_unspent_count,
            self.unsynced_unspent_available_amount(now),
            self.unsynced_unspent
                .iter()
                .map(|x| x.to_string())
                .join(",")
        );
        let synced_spent_count: usize = self.synced_spent.len();
        let synced_spent: String = format!(
            "synced, spent UTXOS: count: {}, amount: {:?}\n[{}]",
            synced_spent_count,
            self.synced_spent_amount(),
            self.synced_spent.iter().map(|x| x.to_string()).join(",")
        );
        let unsynced_spent_count: usize = self.unsynced_spent.len();
        let unsynced_spent: String = format!(
            "unsynced, spent UTXOS: count: {}, amount: {:?}\n[{}]",
            unsynced_spent_count,
            self.unsynced_spent_amount(),
            self.unsynced_spent.iter().map(|x| x.to_string()).join(",")
        );
        write!(
            f,
            "{}\n\n{}\n\n{}\n\n{}\n\n{}",
            synced_unspent_available,
            synced_unspent_timelocked,
            unsynced_unspent,
            synced_spent,
            unsynced_spent
        )
    }
}
